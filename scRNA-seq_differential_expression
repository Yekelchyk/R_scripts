# load files ####
library(scater)
library(SingleCellExperiment)
library(gplots)
library(viridis)
library(RColorBrewer)
library(ggplot2)
library(readr)
library(MAST)
library(readxl)
library(ggrepel)
library(tidyr)

load("scd.Rdata")   
#scd is a SCE container, having expression matrix, feature data (genes annotation) and phenotype data (cells metadata)

scd<-subset(scd,fData(scd)$biotype=="protein_coding")   #most of the scRNA-seq library preparations are poliA-based

finfo <- fData(scd)
pinfo <- pData(scd)

# DE function ####
differentialExpression <- function(expression, contrasts, fData) {
  diff_data <- lapply(names(contrasts), function(l) {
    cells <- contrasts[[l]]
    
    data <- cbind(expression[, cells[[1]]], expression[, cells[[2]]])
    cond_A <- unlist(strsplit(l, "_"))[1]
    cond_B <- unlist(strsplit(l, "_"))[2]
    
    cond <- c(rep(cond_A, length(cells[[1]])), rep(cond_B, length(cells[[2]])))
    
    cdat <- data.frame(wellKey = colnames(data), condition = factor(cond), stringsAsFactors = F)
    fdat <- data.frame(primerid = rownames(data), stringsAsFactors = F)
    sca <- MAST::FromMatrix(class = "SingleCellAssay",
                            exprsArray=data,
                            cData = cdat,
                            fData = fdat)
    
    zlm <- MAST::zlm(~ condition, sca, method = "bayesglm", ebayes = TRUE, ebayesControl = list(method = "MLE", model = "H1"))
    s <- MAST::summary(zlm, doLRT = paste0('condition', cond_B))$datatable
    res <- merge(s[contrast==paste0('condition', cond_B) & component=='H',.(primerid, `Pr(>Chisq)`)], #hurdle P values
                 s[contrast==paste0('condition', cond_B) & component=='logFC', .(primerid, coef, ci.hi, ci.lo)], by='primerid') #logFC coefficients
    colnames(res) <- c("geneID", "pval", "lfc", "lfc.hi", "lfc.lo")
    # Calculation of FDR
    res$fdr <- p.adjust(res$pval, method = "fdr")
    
    # Calculation of basemeanA expressions
    basemeanA <- rowMeans(data[, cond == cond_A])
    m <- match(res$geneID, names(basemeanA))
    res$basemeanA <- basemeanA[m]
    
    # Calculation of basemeanB expressions
    basemeanB <- rowMeans(data[, cond == cond_B])
    m <- match(res$geneID, names(basemeanB))
    res$basemeanB <- basemeanB[m]
    
    colnames(res[, c("basemeanA", "basemeanB")]) <- c(cond_A, cond_B)
    
    # Adding number of cells with detectable expression
    # n_exprsA <- rowSums(counts(subset[, cond == cond_A]) > 10, na.rm = T)
    # m <- match(res$geneID, names(n_exprsA))
    # res$n_exprsA <- n_exprsA[m]
    # n_exprsB <- rowSums(counts(subset[, cond == cond_B]) > 10, na.rm = T)
    # m <- match(res$geneID, names(n_exprsB))
    # res$n_exprsB <- n_exprsB[m]
    
    m <- match(res$geneID, rownames(fData))
    res <- cbind(res, fData[m, c("symbol", "biotype", "description")])
    
    res
  })
}

get_auroc <- function(gene, labels) {
  gene <- gene[!is.na(labels)]
  labels <- na.omit(labels)
  score <- rank(gene)
  # Get average score for each cluster
  ms <- aggregate(score ~ labels, FUN = mean)
  # Get cluster with highest average score
  posgroup <- ms[ms$score == max(ms$score), ]$labels
  # Return NAs if there is a tie for cluster with highest average score (by definition this is
  # not cluster specific)
  if (length(posgroup) > 1) {
    return(c(NA, NA, NA))
  }
  # Create 1/0 vector of truths for predictions, cluster with highest average score vs
  # everything else
  truth <- as.numeric(labels == posgroup)
  # Make predictions & get auc using RCOR package.
  pred <- prediction(score, truth)
  val <- unlist(ROCR::performance(pred, "auc")@y.values)
  pval <- suppressWarnings(wilcox.test(score[truth == 1], score[truth == 0])$p.value)
  return(c(val, posgroup, pval))
}

get_marker_genes <- function(dataset, labels) {
  res <- apply(dataset, 1, get_auroc, labels = labels)
  res <- data.frame(matrix(unlist(res), ncol = 3, byrow = T))
  colnames(res) <- c("auroc", "clusts", "pvalue")
  res$fdr <- p.adjust(res$pvalue)
  res$geneID <- rownames(dataset)
  return(res)
}

# analysis ####


# clustering 
plotPCA(scd,exprs_values = "counts",colour='Type',ncomponents=3)
plotTSNE(scd,exprs_values = "counts",colour='Type',ncomponents=3)


#Differential expression
Expression <- assay(scd, "counts")
Groups_A_B <- list( "A_B" = list(which(colData(scd)@listData$Type=='A'),
                                             which(colData(scd)@listData$Type=='B')))

De_A_B <- differentialExpression(Expression, Groups_A_B, finfo)
names(De_A_B) <- names(Groups_A_B)               
De_A_B <- De_A_B`A_B`
De_A_B<-De_A_B[which(De_A_B$fdr<0.05),]                                #p-adjusted cutoff

write.table(
  De_A_B,
  row.names = F,
  "~/blabla/De_A_B.txt",
  sep="\t",
  quote = F)
  


#Volcano plots
pos1<-which(De_A_B$lfc>1)
neg1<-which(De_A_B$lfc<(-1))
pos_neg1<-vector()
pos_neg1[1:(length(rownames(De_A_B)))]<-'-1<lfc<1'
pos_neg1[pos1]<-'lfc>1'
pos_neg1[neg1]<-'lfc<-1'
De_A_B<-cbind(De_A_B,pos_neg1)
De_A_B<-De_A_B[order(abs(De_A_B$lfc),decreasing = T),]

De_A_B1<-De_A_B[1:100,]        # you can make a subset of top 100 de genes

ggplot(data=De_A_B1, aes(x=lfc, y=-log10(fdr),color=De_A_B1$pos_neg1)) +
  geom_point(alpha=0.4, size=3) +
  xlab("log2 fold change") + ylab("-log10 p-value")+
  ggtitle("Differentially expressed genes",
          subtitle ="Between Cond A (left) and Cond B (right)")+
  geom_text_repel(data = De_A_B1[which(abs(De_A_B1$lfc)>1),], 
        aes(x=lfc-0.22, y=0.2+(-log10(fdr)),label=symbol), size=2.7, colour="black")+
  theme_classic()



# Heatmap

Expression_matr<-assay(scd, "counts")
colnames(Expression_matr)<-paste(pinfo$Type,pinfo$Chip)
Expression_matr<-Expression_matr[,rev(order(colnames(Expression_matr)))]
matr_de<-as.matrix(Expression_matr[match(De_A_B1[,]$geneID,rownames(Expression_matr)),])       #select only DE genes for heatmap
rownames(matr_de)<-De_A_B1$symbol

de<-De_A_B1$lfc
de[which(De_A_B1$lfc<0)]<-'green'
de[which(De_A_B1$lfc>0)]<-'pink'

type<-as.character(colnames(Expression_matr))
type[which(type=='A')]<-'blue'
type[which(type=='B')]<-'red'

library(RColorBrewer)
Colors=rev(brewer.pal(11,"RdBu"))
Colors=colorRampPalette(Colors)(100)

heatmap.2(matr_de,
          key = F,
          trace = "none",
          Rowv = F,
          Colv = F,
          labCol = F,
          #labRow = F,
          ColSideColors=type,
          RowSideColors=de,
          #distfun=function(x) as.dist(1-cor(t(x),method = "pearson", use="pairwise.complete.obs")),      #if you want it to do row clustering
          scale = 'row',
          adjRow = c(0.15,0.5),
          adjCol = c(0.8,0),
          col = Colors,
          #srtRow=15,
          cexCol = 0.9)

